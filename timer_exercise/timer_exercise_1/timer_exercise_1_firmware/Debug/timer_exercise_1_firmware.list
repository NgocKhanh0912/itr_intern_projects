
timer_exercise_1_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002a58  08002a58  00003a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a68  08002a68  0000403c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a68  08002a68  00003a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a70  08002a70  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a70  08002a70  00003a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a74  08002a74  00003a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08002a78  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000003c  08002ab4  0000403c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002ab4  000040b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae82  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002189  00000000  00000000  0000eeee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00011078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084e  00000000  00000000  00011b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d26  00000000  00000000  000123be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec46  00000000  00000000  000290e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bae0  00000000  00000000  00037d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c380a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  000c3850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000c63fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000003c 	.word	0x2000003c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a40 	.word	0x08002a40

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000040 	.word	0x20000040
 80001d4:	08002a40 	.word	0x08002a40

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <bsp_gpio_init>:
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
bsp_gpio_status_t bsp_gpio_init(bsp_gpio_t *gpio)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  __ASSERT((gpio->port != NULL), GPIO_STATUS_ERROR);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d102      	bne.n	80004de <bsp_gpio_init+0x16>
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295
 80004dc:	e021      	b.n	8000522 <bsp_gpio_init+0x5a>
  __ASSERT((gpio->pin >= 0), GPIO_STATUS_ERROR);
  __ASSERT((gpio->pin <= 15), GPIO_STATUS_ERROR);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	889b      	ldrh	r3, [r3, #4]
 80004e2:	2b0f      	cmp	r3, #15
 80004e4:	d902      	bls.n	80004ec <bsp_gpio_init+0x24>
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	e01a      	b.n	8000522 <bsp_gpio_init+0x5a>
  __ASSERT((gpio->state == 0) ||
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	799b      	ldrb	r3, [r3, #6]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d006      	beq.n	8000502 <bsp_gpio_init+0x3a>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	799b      	ldrb	r3, [r3, #6]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d002      	beq.n	8000502 <bsp_gpio_init+0x3a>
 80004fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000500:	e00f      	b.n	8000522 <bsp_gpio_init+0x5a>
           (gpio->state == 1), GPIO_STATUS_ERROR);
  __ASSERT((gpio->mode == GPIO_MODE_INPUT) ||
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d00a      	beq.n	8000520 <bsp_gpio_init+0x58>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d006      	beq.n	8000520 <bsp_gpio_init+0x58>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	2b11      	cmp	r3, #17
 8000518:	d002      	beq.n	8000520 <bsp_gpio_init+0x58>
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	e000      	b.n	8000522 <bsp_gpio_init+0x5a>
           (gpio->mode == GPIO_MODE_OUTPUT_PP) ||
           (gpio->mode == GPIO_MODE_OUTPUT_OD), GPIO_STATUS_ERROR);

  return GPIO_STATUS_OK;
 8000520:	2301      	movs	r3, #1
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <bsp_gpio_write_pin>:

bsp_gpio_status_t bsp_gpio_write_pin(bsp_gpio_t *gpio, GPIO_PinState gpio_state)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	460b      	mov	r3, r1
 8000538:	70fb      	strb	r3, [r7, #3]
  __ASSERT((gpio->state == 0) ||
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	799b      	ldrb	r3, [r3, #6]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d006      	beq.n	8000550 <bsp_gpio_write_pin+0x22>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	799b      	ldrb	r3, [r3, #6]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d002      	beq.n	8000550 <bsp_gpio_write_pin+0x22>
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	e013      	b.n	8000578 <bsp_gpio_write_pin+0x4a>
           (gpio->state == 1), GPIO_STATUS_ERROR);
  __ASSERT((gpio->mode == GPIO_MODE_OUTPUT_PP) ||
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d006      	beq.n	8000566 <bsp_gpio_write_pin+0x38>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	2b11      	cmp	r3, #17
 800055e:	d002      	beq.n	8000566 <bsp_gpio_write_pin+0x38>
 8000560:	f04f 33ff 	mov.w	r3, #4294967295
 8000564:	e008      	b.n	8000578 <bsp_gpio_write_pin+0x4a>
           (gpio->mode == GPIO_MODE_OUTPUT_OD), GPIO_STATUS_ERROR);

  HAL_GPIO_WritePin(gpio->port, gpio->pin, gpio_state);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6818      	ldr	r0, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	889b      	ldrh	r3, [r3, #4]
 800056e:	78fa      	ldrb	r2, [r7, #3]
 8000570:	4619      	mov	r1, r3
 8000572:	f001 f9a7 	bl	80018c4 <HAL_GPIO_WritePin>
  return GPIO_STATUS_OK;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <bsp_gpio_read_pin>:

GPIO_PinState bsp_gpio_read_pin(bsp_gpio_t *gpio)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  __ASSERT((gpio->mode == GPIO_MODE_INPUT), GPIO_STATUS_ERROR);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <bsp_gpio_read_pin+0x14>
 8000590:	23ff      	movs	r3, #255	@ 0xff
 8000592:	e00d      	b.n	80005b0 <bsp_gpio_read_pin+0x30>

  gpio->state = HAL_GPIO_ReadPin(gpio->port, gpio->pin);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	889b      	ldrh	r3, [r3, #4]
 800059c:	4619      	mov	r1, r3
 800059e:	4610      	mov	r0, r2
 80005a0:	f001 f978 	bl	8001894 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	719a      	strb	r2, [r3, #6]
  return gpio->state;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	799b      	ldrb	r3, [r3, #6]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <bsp_gpio_toggle_pin>:

bsp_gpio_status_t bsp_gpio_toggle_pin(bsp_gpio_t *gpio)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  __ASSERT((gpio->mode == GPIO_MODE_OUTPUT_PP) ||
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d006      	beq.n	80005d6 <bsp_gpio_toggle_pin+0x1e>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	2b11      	cmp	r3, #17
 80005ce:	d002      	beq.n	80005d6 <bsp_gpio_toggle_pin+0x1e>
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	e008      	b.n	80005e8 <bsp_gpio_toggle_pin+0x30>
           (gpio->mode == GPIO_MODE_OUTPUT_OD), GPIO_STATUS_ERROR);

  HAL_GPIO_TogglePin(gpio->port, gpio->pin);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	889b      	ldrh	r3, [r3, #4]
 80005de:	4619      	mov	r1, r3
 80005e0:	4610      	mov	r0, r2
 80005e2:	f001 f988 	bl	80018f6 <HAL_GPIO_TogglePin>
  return GPIO_STATUS_OK;
 80005e6:	2301      	movs	r3, #1
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <bsp_timer_set_prescaler>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
bsp_timer_status_t bsp_timer_set_prescaler(TIM_HandleTypeDef *htim, uint32_t prescaler)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  __ASSERT(htim != NULL, BSP_TIMER_ERROR);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <bsp_timer_set_prescaler+0x16>
 8000600:	f06f 0301 	mvn.w	r3, #1
 8000604:	e00b      	b.n	800061e <bsp_timer_set_prescaler+0x2e>
  __ASSERT((prescaler >= 0) && (prescaler < 65536), BSP_TIMER_ERROR);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800060c:	d302      	bcc.n	8000614 <bsp_timer_set_prescaler+0x24>
 800060e:	f06f 0301 	mvn.w	r3, #1
 8000612:	e004      	b.n	800061e <bsp_timer_set_prescaler+0x2e>

  __HAL_TIM_SET_PRESCALER(htim, prescaler);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	629a      	str	r2, [r3, #40]	@ 0x28

  return BSP_TIMER_OK;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <bsp_timer_set_autoreload>:

bsp_timer_status_t bsp_timer_set_autoreload(TIM_HandleTypeDef *htim, uint32_t autoreload)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
  __ASSERT(htim != NULL, BSP_TIMER_ERROR);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <bsp_timer_set_autoreload+0x16>
 800063a:	f06f 0301 	mvn.w	r3, #1
 800063e:	e00e      	b.n	800065e <bsp_timer_set_autoreload+0x34>
  __ASSERT((autoreload >= 0) && (autoreload < 65536), BSP_TIMER_ERROR);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000646:	d302      	bcc.n	800064e <bsp_timer_set_autoreload+0x24>
 8000648:	f06f 0301 	mvn.w	r3, #1
 800064c:	e007      	b.n	800065e <bsp_timer_set_autoreload+0x34>

  __HAL_TIM_SET_AUTORELOAD(htim, autoreload);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	60da      	str	r2, [r3, #12]

  return BSP_TIMER_OK;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <bsp_timer_start_it>:
  __ASSERT(btim_err == HAL_OK, BSP_TIMER_FAIL);
  return BSP_TIMER_OK;
}

bsp_timer_status_t bsp_timer_start_it(TIM_HandleTypeDef *htim)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b084      	sub	sp, #16
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
  __ASSERT(htim != NULL, BSP_TIMER_ERROR);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <bsp_timer_start_it+0x14>
 8000678:	f06f 0301 	mvn.w	r3, #1
 800067c:	e00d      	b.n	800069a <bsp_timer_start_it+0x30>

  HAL_StatusTypeDef btim_err = BSP_TIMER_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	73fb      	strb	r3, [r7, #15]
  btim_err = HAL_TIM_Base_Start_IT(htim);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f001 fdc6 	bl	8002214 <HAL_TIM_Base_Start_IT>
 8000688:	4603      	mov	r3, r0
 800068a:	73fb      	strb	r3, [r7, #15]

  __ASSERT(btim_err == HAL_OK, BSP_TIMER_FAIL);
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <bsp_timer_start_it+0x2e>
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	e000      	b.n	800069a <bsp_timer_start_it+0x30>
  return BSP_TIMER_OK;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <bsp_get_systick>:
  __ASSERT(btim_err = HAL_OK, BSP_TIMER_FAIL);
  return BSP_TIMER_OK;
}

uint32_t bsp_get_systick()
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80006a6:	f000 fe53 	bl	8001350 <HAL_GetTick>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <drv_button_init>:
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
drv_button_status_t drv_button_init(bsp_gpio_t *gpio_button)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  bsp_gpio_init(gpio_button);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ff05 	bl	80004c8 <bsp_gpio_init>
  return BUTTON_STATUS_OK;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <drv_button_read_pin>:

GPIO_PinState drv_button_read_pin(bsp_gpio_t *gpio_button)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  return bsp_gpio_read_pin(gpio_button);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff55 	bl	8000580 <bsp_gpio_read_pin>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <drv_button_get_tick>:

uint32_t drv_button_get_tick()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  return bsp_get_systick();
 80006e4:	f7ff ffdd 	bl	80006a2 <bsp_get_systick>
 80006e8:	4603      	mov	r3, r0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}

080006ee <drv_led_init>:
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
drv_led_status_t drv_led_init(bsp_gpio_t *gpio_led, drv_led_active_level_t led_active_level)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	70fb      	strb	r3, [r7, #3]
  bsp_gpio_init(gpio_led);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff fee4 	bl	80004c8 <bsp_gpio_init>

  if (led_active_level == LED_ACTIVE_LEVEL_HIGH)
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d104      	bne.n	8000710 <drv_led_init+0x22>
    {
      bsp_gpio_write_pin(gpio_led, LED_ACTIVE_LEVEL_HIGH_OFF);
 8000706:	2100      	movs	r1, #0
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff10 	bl	800052e <bsp_gpio_write_pin>
 800070e:	e006      	b.n	800071e <drv_led_init+0x30>
    }
  else if (led_active_level == LED_ACTIVE_LEVEL_LOW)
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d103      	bne.n	800071e <drv_led_init+0x30>
    {
      bsp_gpio_write_pin(gpio_led, LED_ACTIVE_LEVEL_LOW_OFF);
 8000716:	2101      	movs	r1, #1
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff08 	bl	800052e <bsp_gpio_write_pin>
    }
  return LED_INIT_STATUS_OK;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <drv_led_set_off>:
    }
  return LED_SET_STATUS_OK;
}

drv_led_status_t drv_led_set_off(bsp_gpio_t *gpio_led, drv_led_active_level_t led_active_level)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
  if (led_active_level == LED_ACTIVE_LEVEL_HIGH)
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d104      	bne.n	8000744 <drv_led_set_off+0x1c>
    {
      bsp_gpio_write_pin(gpio_led, LED_ACTIVE_LEVEL_HIGH_OFF);
 800073a:	2100      	movs	r1, #0
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fef6 	bl	800052e <bsp_gpio_write_pin>
 8000742:	e006      	b.n	8000752 <drv_led_set_off+0x2a>
    }
  else if (led_active_level == LED_ACTIVE_LEVEL_LOW)
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d103      	bne.n	8000752 <drv_led_set_off+0x2a>
    {
      bsp_gpio_write_pin(gpio_led, LED_ACTIVE_LEVEL_LOW_OFF);
 800074a:	2101      	movs	r1, #1
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff feee 	bl	800052e <bsp_gpio_write_pin>
    }
  return LED_CLEAR_STATUS_OK;
 8000752:	2304      	movs	r3, #4
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <drv_led_toggle>:

drv_led_status_t drv_led_toggle(bsp_gpio_t *gpio_led, drv_led_active_level_t led_active_level)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
  bsp_gpio_toggle_pin(gpio_led);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff25 	bl	80005b8 <bsp_gpio_toggle_pin>
  return LED_TOGGLE_STATUS_OK;
 800076e:	2306      	movs	r3, #6
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f000 fd81 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f83f 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 f8f3 	bl	8000970 <MX_GPIO_Init>
  MX_TIM2_Init();
 800078a:	f000 f8a3 	bl	80008d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  sys_init(&BUTTON, LED, LED_ACTIVE_LEVEL_HIGH, &htim2, 1599, 4999);
 800078e:	f241 3387 	movw	r3, #4999	@ 0x1387
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	f240 633f 	movw	r3, #1599	@ 0x63f
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <main+0x50>)
 800079c:	2201      	movs	r2, #1
 800079e:	490b      	ldr	r1, [pc, #44]	@ (80007cc <main+0x54>)
 80007a0:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <main+0x58>)
 80007a2:	f000 fc2f 	bl	8001004 <sys_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* USER CODE END WHILE */
	button_evt = sys_button_fsm(&BUTTON);
 80007a6:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <main+0x58>)
 80007a8:	f000 f9e2 	bl	8000b70 <sys_button_fsm>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <main+0x5c>)
 80007b2:	701a      	strb	r2, [r3, #0]
	sys_manage_fsm(LED, LED_ACTIVE_LEVEL_HIGH, button_evt, &timer_flag);
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <main+0x5c>)
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <main+0x60>)
 80007ba:	2101      	movs	r1, #1
 80007bc:	4803      	ldr	r0, [pc, #12]	@ (80007cc <main+0x54>)
 80007be:	f000 fc41 	bl	8001044 <sys_manage_fsm>
	button_evt = sys_button_fsm(&BUTTON);
 80007c2:	bf00      	nop
 80007c4:	e7ef      	b.n	80007a6 <main+0x2e>
 80007c6:	bf00      	nop
 80007c8:	20000058 	.word	0x20000058
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000024 	.word	0x20000024
 80007d4:	200000a1 	.word	0x200000a1
 80007d8:	200000a0 	.word	0x200000a0

080007dc <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief Callback Function of timer interrupt
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007ec:	d102      	bne.n	80007f4 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	timer_flag = 1;
 80007ee:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
  }
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	200000a0 	.word	0x200000a0

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	@ 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2230      	movs	r2, #48	@ 0x30
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 f8e8 	bl	80029e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <SystemClock_Config+0xc8>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	4a26      	ldr	r2, [pc, #152]	@ (80008cc <SystemClock_Config+0xc8>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000836:	6413      	str	r3, [r2, #64]	@ 0x40
 8000838:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <SystemClock_Config+0xc8>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <SystemClock_Config+0xcc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a20      	ldr	r2, [pc, #128]	@ (80008d0 <SystemClock_Config+0xcc>)
 800084e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <SystemClock_Config+0xcc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000868:	2310      	movs	r3, #16
 800086a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086c:	2302      	movs	r3, #2
 800086e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000870:	2300      	movs	r3, #0
 8000872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000874:	2308      	movs	r3, #8
 8000876:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000878:	2340      	movs	r3, #64	@ 0x40
 800087a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f84f 	bl	800192c <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000894:	f000 f8cc 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80008a0:	2390      	movs	r3, #144	@ 0x90
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fab1 	bl	8001e1c <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008c0:	f000 f8b6 	bl	8000a30 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3750      	adds	r7, #80	@ 0x50
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <MX_TIM2_Init+0x98>)
 80008f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <MX_TIM2_Init+0x98>)
 80008fa:	f240 623f 	movw	r2, #1599	@ 0x63f
 80008fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_TIM2_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <MX_TIM2_Init+0x98>)
 8000908:	f241 3287 	movw	r2, #4999	@ 0x1387
 800090c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_TIM2_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <MX_TIM2_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800091a:	4814      	ldr	r0, [pc, #80]	@ (800096c <MX_TIM2_Init+0x98>)
 800091c:	f001 fc2a 	bl	8002174 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000926:	f000 f883 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	@ (800096c <MX_TIM2_Init+0x98>)
 8000938:	f001 fdbe 	bl	80024b8 <HAL_TIM_ConfigClockSource>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000942:	f000 f875 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	@ (800096c <MX_TIM2_Init+0x98>)
 8000954:	f001 ffc6 	bl	80028e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800095e:	f000 f867 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000058 	.word	0x20000058

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <MX_GPIO_Init+0xb4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a25      	ldr	r2, [pc, #148]	@ (8000a24 <MX_GPIO_Init+0xb4>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <MX_GPIO_Init+0xb4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <MX_GPIO_Init+0xb4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a24 <MX_GPIO_Init+0xb4>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <MX_GPIO_Init+0xb4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_GPIO_Init+0xb4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <MX_GPIO_Init+0xb4>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_GPIO_Init+0xb4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80009e0:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_GPIO_Init+0xb8>)
 80009e2:	f000 ff6f 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80009e6:	2301      	movs	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ee:	2302      	movs	r3, #2
 80009f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <MX_GPIO_Init+0xbc>)
 80009fa:	f000 fdc7 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80009fe:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_GPIO_Init+0xb8>)
 8000a18:	f000 fdb8 	bl	800158c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020000 	.word	0x40020000

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a9c:	d115      	bne.n	8000aca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x48>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x48>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x48>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	201c      	movs	r0, #28
 8000ac0:	f000 fd2d 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ac4:	201c      	movs	r0, #28
 8000ac6:	f000 fd46 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <NMI_Handler+0x4>

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <MemManage_Handler+0x4>

08000af0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <UsageFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 fbfb 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <TIM2_IRQHandler+0x10>)
 8000b3e:	f001 fbcb 	bl	80022d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000058 	.word	0x20000058

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <sys_button_fsm>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
sys_button_evt_t sys_button_fsm(bsp_gpio_t *gpio_button)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  switch (button_current_state)
 8000b78:	4ba9      	ldr	r3, [pc, #676]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b0c      	cmp	r3, #12
 8000b7e:	f200 818a 	bhi.w	8000e96 <sys_button_fsm+0x326>
 8000b82:	a201      	add	r2, pc, #4	@ (adr r2, 8000b88 <sys_button_fsm+0x18>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000bbd 	.word	0x08000bbd
 8000b8c:	08000bed 	.word	0x08000bed
 8000b90:	08000c2f 	.word	0x08000c2f
 8000b94:	08000c85 	.word	0x08000c85
 8000b98:	08000cf3 	.word	0x08000cf3
 8000b9c:	08000d3f 	.word	0x08000d3f
 8000ba0:	08000d95 	.word	0x08000d95
 8000ba4:	08000ce5 	.word	0x08000ce5
 8000ba8:	08000da3 	.word	0x08000da3
 8000bac:	08000df1 	.word	0x08000df1
 8000bb0:	08000e31 	.word	0x08000e31
 8000bb4:	08000e7b 	.word	0x08000e7b
 8000bb8:	08000e89 	.word	0x08000e89
  {
    case BUTTON_STATE_IDLE:
    {
      button_evt = BUTTON_EVT_NONE;
 8000bbc:	4b99      	ldr	r3, [pc, #612]	@ (8000e24 <sys_button_fsm+0x2b4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
      button_state = drv_button_read_pin(gpio_button);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fd80 	bl	80006c8 <drv_button_read_pin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b96      	ldr	r3, [pc, #600]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000bce:	701a      	strb	r2, [r3, #0]
      if (button_state == 1)
 8000bd0:	4b95      	ldr	r3, [pc, #596]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	f040 8160 	bne.w	8000e9a <sys_button_fsm+0x32a>
        {
          button_current_state = BUTTON_STATE_DETECT_POSEDGE;
 8000bda:	4b91      	ldr	r3, [pc, #580]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
          start_tick = drv_button_get_tick();
 8000be0:	f7ff fd7e 	bl	80006e0 <drv_button_get_tick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4a91      	ldr	r2, [pc, #580]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000be8:	6013      	str	r3, [r2, #0]
        }
      break;
 8000bea:	e156      	b.n	8000e9a <sys_button_fsm+0x32a>
    }

    case BUTTON_STATE_DETECT_POSEDGE:
    {
      if ((drv_button_get_tick() - start_tick) >= BUTTON_DEBOUNCE_TIME)
 8000bec:	f7ff fd78 	bl	80006e0 <drv_button_get_tick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b8e      	ldr	r3, [pc, #568]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b31      	cmp	r3, #49	@ 0x31
 8000bfa:	f240 8150 	bls.w	8000e9e <sys_button_fsm+0x32e>
        {
          button_state = drv_button_read_pin(gpio_button);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fd62 	bl	80006c8 <drv_button_read_pin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b87      	ldr	r3, [pc, #540]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000c0a:	701a      	strb	r2, [r3, #0]
          if (button_state == 0)
 8000c0c:	4b86      	ldr	r3, [pc, #536]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d103      	bne.n	8000c1c <sys_button_fsm+0xac>
            {
              button_current_state = BUTTON_STATE_IDLE;
 8000c14:	4b82      	ldr	r3, [pc, #520]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
            {
              button_current_state = BUTTON_STATE_DETECT_SINGLE_CLICK;
              start_tick = drv_button_get_tick();
            }
      }
      break;
 8000c1a:	e140      	b.n	8000e9e <sys_button_fsm+0x32e>
              button_current_state = BUTTON_STATE_DETECT_SINGLE_CLICK;
 8000c1c:	4b80      	ldr	r3, [pc, #512]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	701a      	strb	r2, [r3, #0]
              start_tick = drv_button_get_tick();
 8000c22:	f7ff fd5d 	bl	80006e0 <drv_button_get_tick>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a80      	ldr	r2, [pc, #512]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000c2a:	6013      	str	r3, [r2, #0]
      break;
 8000c2c:	e137      	b.n	8000e9e <sys_button_fsm+0x32e>
    }

    case BUTTON_STATE_DETECT_SINGLE_CLICK:
    {
      button_state = drv_button_read_pin(gpio_button);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fd4a 	bl	80006c8 <drv_button_read_pin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b7b      	ldr	r3, [pc, #492]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000c3a:	701a      	strb	r2, [r3, #0]
      if ((button_state == 0) && ((drv_button_get_tick() - start_tick) < BUTTON_CLICK_TIME))
 8000c3c:	4b7a      	ldr	r3, [pc, #488]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d111      	bne.n	8000c68 <sys_button_fsm+0xf8>
 8000c44:	f7ff fd4c 	bl	80006e0 <drv_button_get_tick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4b78      	ldr	r3, [pc, #480]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c54:	d208      	bcs.n	8000c68 <sys_button_fsm+0xf8>
        {
          button_current_state = BUTTON_STATE_END_SINGLE_CLICK;
 8000c56:	4b72      	ldr	r3, [pc, #456]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	701a      	strb	r2, [r3, #0]
          start_tick = drv_button_get_tick();
 8000c5c:	f7ff fd40 	bl	80006e0 <drv_button_get_tick>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a72      	ldr	r2, [pc, #456]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000c64:	6013      	str	r3, [r2, #0]
        }
      else if ((drv_button_get_tick() - start_tick) >= BUTTON_CLICK_TIME)
        {
          button_current_state = BUTTON_STATE_DETECT_HOLD;
        }
      break;
 8000c66:	e11c      	b.n	8000ea2 <sys_button_fsm+0x332>
      else if ((drv_button_get_tick() - start_tick) >= BUTTON_CLICK_TIME)
 8000c68:	f7ff fd3a 	bl	80006e0 <drv_button_get_tick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	4b6f      	ldr	r3, [pc, #444]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c78:	f0c0 8113 	bcc.w	8000ea2 <sys_button_fsm+0x332>
          button_current_state = BUTTON_STATE_DETECT_HOLD;
 8000c7c:	4b68      	ldr	r3, [pc, #416]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000c7e:	2208      	movs	r2, #8
 8000c80:	701a      	strb	r2, [r3, #0]
      break;
 8000c82:	e10e      	b.n	8000ea2 <sys_button_fsm+0x332>
    }

    case BUTTON_STATE_END_SINGLE_CLICK:
    {
      button_state = drv_button_read_pin(gpio_button);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff fd1f 	bl	80006c8 <drv_button_read_pin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b66      	ldr	r3, [pc, #408]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000c90:	701a      	strb	r2, [r3, #0]
      if ((button_state == 0) && (drv_button_get_tick() - start_tick) >= BUTTON_RELEASE_TIME)
 8000c92:	4b65      	ldr	r3, [pc, #404]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10c      	bne.n	8000cb4 <sys_button_fsm+0x144>
 8000c9a:	f7ff fd21 	bl	80006e0 <drv_button_get_tick>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	4b62      	ldr	r3, [pc, #392]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000caa:	d303      	bcc.n	8000cb4 <sys_button_fsm+0x144>
        {
          button_current_state = BUTTON_STATE_SINGLE_CLICK;
 8000cac:	4b5c      	ldr	r3, [pc, #368]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000cae:	2207      	movs	r2, #7
 8000cb0:	701a      	strb	r2, [r3, #0]
      else if ((button_state == 1) && (drv_button_get_tick() - start_tick) < BUTTON_RELEASE_TIME)
        {
          button_current_state = BUTTON_STATE_DETECT_PRE_DOUBLE_CLICK;
          start_tick = drv_button_get_tick();
        }
      break;
 8000cb2:	e0f8      	b.n	8000ea6 <sys_button_fsm+0x336>
      else if ((button_state == 1) && (drv_button_get_tick() - start_tick) < BUTTON_RELEASE_TIME)
 8000cb4:	4b5c      	ldr	r3, [pc, #368]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	f040 80f4 	bne.w	8000ea6 <sys_button_fsm+0x336>
 8000cbe:	f7ff fd0f 	bl	80006e0 <drv_button_get_tick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	4b59      	ldr	r3, [pc, #356]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000cce:	f080 80ea 	bcs.w	8000ea6 <sys_button_fsm+0x336>
          button_current_state = BUTTON_STATE_DETECT_PRE_DOUBLE_CLICK;
 8000cd2:	4b53      	ldr	r3, [pc, #332]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	701a      	strb	r2, [r3, #0]
          start_tick = drv_button_get_tick();
 8000cd8:	f7ff fd02 	bl	80006e0 <drv_button_get_tick>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4a53      	ldr	r2, [pc, #332]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000ce0:	6013      	str	r3, [r2, #0]
      break;
 8000ce2:	e0e0      	b.n	8000ea6 <sys_button_fsm+0x336>
    }

    case BUTTON_STATE_SINGLE_CLICK:
    {
      button_evt = BUTTON_EVT_SINGLE_CLICK;
 8000ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8000e24 <sys_button_fsm+0x2b4>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
      button_current_state = BUTTON_STATE_IDLE;
 8000cea:	4b4d      	ldr	r3, [pc, #308]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
      break;
 8000cf0:	e0e4      	b.n	8000ebc <sys_button_fsm+0x34c>
    }

    case BUTTON_STATE_DETECT_PRE_DOUBLE_CLICK:
    {
      if ((drv_button_get_tick() - start_tick) >= BUTTON_DEBOUNCE_TIME)
 8000cf2:	f7ff fcf5 	bl	80006e0 <drv_button_get_tick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b31      	cmp	r3, #49	@ 0x31
 8000d00:	f240 80d3 	bls.w	8000eaa <sys_button_fsm+0x33a>
      {
        button_state = drv_button_read_pin(gpio_button);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fcdf 	bl	80006c8 <drv_button_read_pin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b46      	ldr	r3, [pc, #280]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000d10:	701a      	strb	r2, [r3, #0]
        if (button_state == 0)
 8000d12:	4b45      	ldr	r3, [pc, #276]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d103      	bne.n	8000d22 <sys_button_fsm+0x1b2>
        {
          button_current_state = BUTTON_STATE_SINGLE_CLICK;
 8000d1a:	4b41      	ldr	r3, [pc, #260]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	701a      	strb	r2, [r3, #0]
        {
          button_current_state = BUTTON_STATE_DETECT_DOUBLE_CLICK;
          start_tick = drv_button_get_tick();
        }
      }
      break;
 8000d20:	e0c3      	b.n	8000eaa <sys_button_fsm+0x33a>
        else if (button_state == 1)
 8000d22:	4b41      	ldr	r3, [pc, #260]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	f040 80bf 	bne.w	8000eaa <sys_button_fsm+0x33a>
          button_current_state = BUTTON_STATE_DETECT_DOUBLE_CLICK;
 8000d2c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000d2e:	2205      	movs	r2, #5
 8000d30:	701a      	strb	r2, [r3, #0]
          start_tick = drv_button_get_tick();
 8000d32:	f7ff fcd5 	bl	80006e0 <drv_button_get_tick>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4a3c      	ldr	r2, [pc, #240]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000d3a:	6013      	str	r3, [r2, #0]
      break;
 8000d3c:	e0b5      	b.n	8000eaa <sys_button_fsm+0x33a>
    }
    case BUTTON_STATE_DETECT_DOUBLE_CLICK:
    {
      button_state = drv_button_read_pin(gpio_button);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fcc2 	bl	80006c8 <drv_button_read_pin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000d4a:	701a      	strb	r2, [r3, #0]
      if ((button_state == 0) && ((drv_button_get_tick() - start_tick) < BUTTON_CLICK_TIME))
 8000d4c:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10c      	bne.n	8000d6e <sys_button_fsm+0x1fe>
 8000d54:	f7ff fcc4 	bl	80006e0 <drv_button_get_tick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	4b34      	ldr	r3, [pc, #208]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d64:	d203      	bcs.n	8000d6e <sys_button_fsm+0x1fe>
      {
        button_current_state = BUTTON_STATE_DOUBLE_CLICK;
 8000d66:	4b2e      	ldr	r3, [pc, #184]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000d68:	2206      	movs	r2, #6
 8000d6a:	701a      	strb	r2, [r3, #0]
      }
      else if ((button_state == 1) && ((drv_button_get_tick() - start_tick) >= BUTTON_CLICK_TIME))
      {
        button_current_state = BUTTON_STATE_ERROR_HANDLER;
      }
      break;
 8000d6c:	e09f      	b.n	8000eae <sys_button_fsm+0x33e>
      else if ((button_state == 1) && ((drv_button_get_tick() - start_tick) >= BUTTON_CLICK_TIME))
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	f040 809b 	bne.w	8000eae <sys_button_fsm+0x33e>
 8000d78:	f7ff fcb2 	bl	80006e0 <drv_button_get_tick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d88:	f0c0 8091 	bcc.w	8000eae <sys_button_fsm+0x33e>
        button_current_state = BUTTON_STATE_ERROR_HANDLER;
 8000d8c:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	701a      	strb	r2, [r3, #0]
      break;
 8000d92:	e08c      	b.n	8000eae <sys_button_fsm+0x33e>
    }

    case BUTTON_STATE_DOUBLE_CLICK:
    {
      button_evt = BUTTON_EVT_DOUBLE_CLICK;
 8000d94:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <sys_button_fsm+0x2b4>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	701a      	strb	r2, [r3, #0]
      button_current_state =BUTTON_STATE_IDLE;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
      break;
 8000da0:	e08c      	b.n	8000ebc <sys_button_fsm+0x34c>
    }

    case BUTTON_STATE_DETECT_HOLD:
    {
      button_state = drv_button_read_pin(gpio_button);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff fc90 	bl	80006c8 <drv_button_read_pin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000dae:	701a      	strb	r2, [r3, #0]
      if ((button_state == 0) && ((drv_button_get_tick() - start_tick) <= BUTTON_HOLD_TIME))
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10d      	bne.n	8000dd4 <sys_button_fsm+0x264>
 8000db8:	f7ff fc92 	bl	80006e0 <drv_button_get_tick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d803      	bhi.n	8000dd4 <sys_button_fsm+0x264>
      {
        button_current_state = BUTTON_STATE_ERROR_HANDLER;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	701a      	strb	r2, [r3, #0]
      }
      else if ((drv_button_get_tick() - start_tick) > BUTTON_HOLD_TIME)
      {
        button_current_state = BUTTON_STATE_HOLD;
      }
      break;
 8000dd2:	e06e      	b.n	8000eb2 <sys_button_fsm+0x342>
      else if ((drv_button_get_tick() - start_tick) > BUTTON_HOLD_TIME)
 8000dd4:	f7ff fc84 	bl	80006e0 <drv_button_get_tick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d964      	bls.n	8000eb2 <sys_button_fsm+0x342>
        button_current_state = BUTTON_STATE_HOLD;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000dea:	2209      	movs	r2, #9
 8000dec:	701a      	strb	r2, [r3, #0]
      break;
 8000dee:	e060      	b.n	8000eb2 <sys_button_fsm+0x342>
    }

    case BUTTON_STATE_HOLD:
    {
      button_evt = BUTTON_EVT_HOLD;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <sys_button_fsm+0x2b4>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	701a      	strb	r2, [r3, #0]
      button_state = drv_button_read_pin(gpio_button);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fc66 	bl	80006c8 <drv_button_read_pin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000e02:	701a      	strb	r2, [r3, #0]
      if (button_state == 0)
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <sys_button_fsm+0x2b8>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d154      	bne.n	8000eb6 <sys_button_fsm+0x346>
      {
        button_current_state = BUTTON_STATE_DETECT_RELEASE;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <sys_button_fsm+0x2b0>)
 8000e0e:	220a      	movs	r2, #10
 8000e10:	701a      	strb	r2, [r3, #0]
        start_tick = drv_button_get_tick();
 8000e12:	f7ff fc65 	bl	80006e0 <drv_button_get_tick>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <sys_button_fsm+0x2bc>)
 8000e1a:	6013      	str	r3, [r2, #0]
      }
      break;
 8000e1c:	e04b      	b.n	8000eb6 <sys_button_fsm+0x346>
 8000e1e:	bf00      	nop
 8000e20:	200000a2 	.word	0x200000a2
 8000e24:	200000a9 	.word	0x200000a9
 8000e28:	200000a8 	.word	0x200000a8
 8000e2c:	200000a4 	.word	0x200000a4
    }

    case BUTTON_STATE_DETECT_RELEASE:
    {
      button_state = drv_button_read_pin(gpio_button);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fc49 	bl	80006c8 <drv_button_read_pin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <sys_button_fsm+0x358>)
 8000e3c:	701a      	strb	r2, [r3, #0]
      if ((button_state == 1) && ((drv_button_get_tick() - start_tick) <= BUTTON_RELEASE_TIME))
 8000e3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <sys_button_fsm+0x358>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d10c      	bne.n	8000e60 <sys_button_fsm+0x2f0>
 8000e46:	f7ff fc4b 	bl	80006e0 <drv_button_get_tick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <sys_button_fsm+0x35c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e56:	d803      	bhi.n	8000e60 <sys_button_fsm+0x2f0>
      {
        button_current_state = BUTTON_STATE_HOLD;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <sys_button_fsm+0x360>)
 8000e5a:	2209      	movs	r2, #9
 8000e5c:	701a      	strb	r2, [r3, #0]
      } 
      else if ((drv_button_get_tick() - start_tick) > BUTTON_RELEASE_TIME)
      {
        button_current_state = BUTTON_STATE_RELEASE;
      }
      break;
 8000e5e:	e02c      	b.n	8000eba <sys_button_fsm+0x34a>
      else if ((drv_button_get_tick() - start_tick) > BUTTON_RELEASE_TIME)
 8000e60:	f7ff fc3e 	bl	80006e0 <drv_button_get_tick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <sys_button_fsm+0x35c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e70:	d923      	bls.n	8000eba <sys_button_fsm+0x34a>
        button_current_state = BUTTON_STATE_RELEASE;
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <sys_button_fsm+0x360>)
 8000e74:	220b      	movs	r2, #11
 8000e76:	701a      	strb	r2, [r3, #0]
      break;
 8000e78:	e01f      	b.n	8000eba <sys_button_fsm+0x34a>
    }

    case BUTTON_STATE_RELEASE:
    {
      button_evt = BUTTON_EVT_RELEASE;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <sys_button_fsm+0x364>)
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	701a      	strb	r2, [r3, #0]
      button_current_state = BUTTON_STATE_IDLE;
 8000e80:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <sys_button_fsm+0x360>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
      break;
 8000e86:	e019      	b.n	8000ebc <sys_button_fsm+0x34c>
    }

    case BUTTON_STATE_ERROR_HANDLER:
    {
      button_evt = BUTTON_EVT_ERROR;
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <sys_button_fsm+0x364>)
 8000e8a:	2205      	movs	r2, #5
 8000e8c:	701a      	strb	r2, [r3, #0]
      button_current_state = BUTTON_STATE_IDLE;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <sys_button_fsm+0x360>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
      break;
 8000e94:	e012      	b.n	8000ebc <sys_button_fsm+0x34c>
    }

    default:
      break;
 8000e96:	bf00      	nop
 8000e98:	e010      	b.n	8000ebc <sys_button_fsm+0x34c>
      break;
 8000e9a:	bf00      	nop
 8000e9c:	e00e      	b.n	8000ebc <sys_button_fsm+0x34c>
      break;
 8000e9e:	bf00      	nop
 8000ea0:	e00c      	b.n	8000ebc <sys_button_fsm+0x34c>
      break;
 8000ea2:	bf00      	nop
 8000ea4:	e00a      	b.n	8000ebc <sys_button_fsm+0x34c>
      break;
 8000ea6:	bf00      	nop
 8000ea8:	e008      	b.n	8000ebc <sys_button_fsm+0x34c>
      break;
 8000eaa:	bf00      	nop
 8000eac:	e006      	b.n	8000ebc <sys_button_fsm+0x34c>
      break;
 8000eae:	bf00      	nop
 8000eb0:	e004      	b.n	8000ebc <sys_button_fsm+0x34c>
      break;
 8000eb2:	bf00      	nop
 8000eb4:	e002      	b.n	8000ebc <sys_button_fsm+0x34c>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <sys_button_fsm+0x34c>
      break;
 8000eba:	bf00      	nop
    }

  return button_evt;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <sys_button_fsm+0x364>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200000a8 	.word	0x200000a8
 8000ecc:	200000a4 	.word	0x200000a4
 8000ed0:	200000a2 	.word	0x200000a2
 8000ed4:	200000a9 	.word	0x200000a9

08000ed8 <sys_led_init>:
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
sys_led_status_t sys_led_init(bsp_gpio_t *LED, drv_led_active_level_t led_active_level)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
  drv_led_init(LED, led_active_level);
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff fc00 	bl	80006ee <drv_led_init>
  drv_led_init(LED + 1, led_active_level);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	330c      	adds	r3, #12
 8000ef2:	78fa      	ldrb	r2, [r7, #3]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fbf9 	bl	80006ee <drv_led_init>
  drv_led_init(LED + 2, led_active_level);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3318      	adds	r3, #24
 8000f00:	78fa      	ldrb	r2, [r7, #3]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fbf2 	bl	80006ee <drv_led_init>
  return SYS_LED_INIT_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <sys_led_effect_for_sys_state_0>:

sys_led_status_t sys_led_effect_for_sys_state_0(bsp_gpio_t *LED, drv_led_active_level_t led_active_level)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
  drv_led_set_off(LED, led_active_level);
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	4619      	mov	r1, r3
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fbff 	bl	8000728 <drv_led_set_off>
  drv_led_set_off(LED + 1, led_active_level);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	330c      	adds	r3, #12
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fbf8 	bl	8000728 <drv_led_set_off>
  drv_led_set_off(LED + 2, led_active_level);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3318      	adds	r3, #24
 8000f3c:	78fa      	ldrb	r2, [r7, #3]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fbf1 	bl	8000728 <drv_led_set_off>
  return SYS_LED_EFFECT_FOR_SYS_STATE_0_OK;
 8000f46:	2302      	movs	r3, #2
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <sys_led_effect_for_sys_state_1>:

sys_led_status_t sys_led_effect_for_sys_state_1(bsp_gpio_t *LED, drv_led_active_level_t led_active_level)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
  drv_led_toggle(LED, led_active_level);
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff fbfb 	bl	800075c <drv_led_toggle>
  drv_led_set_off(LED + 1, led_active_level);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	330c      	adds	r3, #12
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fbda 	bl	8000728 <drv_led_set_off>
  drv_led_set_off(LED + 2, led_active_level);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3318      	adds	r3, #24
 8000f78:	78fa      	ldrb	r2, [r7, #3]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fbd3 	bl	8000728 <drv_led_set_off>
  return SYS_LED_EFFECT_FOR_SYS_STATE_1_OK;
 8000f82:	2304      	movs	r3, #4
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <sys_led_effect_for_sys_state_2>:

sys_led_status_t sys_led_effect_for_sys_state_2(bsp_gpio_t *LED, drv_led_active_level_t led_active_level)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
  drv_led_toggle(LED + 1, led_active_level);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	330c      	adds	r3, #12
 8000f9c:	78fa      	ldrb	r2, [r7, #3]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fbdb 	bl	800075c <drv_led_toggle>
  drv_led_set_off(LED, led_active_level);
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fbbc 	bl	8000728 <drv_led_set_off>
  drv_led_set_off(LED + 2, led_active_level);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3318      	adds	r3, #24
 8000fb4:	78fa      	ldrb	r2, [r7, #3]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fbb5 	bl	8000728 <drv_led_set_off>
  return SYS_LED_EFFECT_FOR_SYS_STATE_2_OK;
 8000fbe:	2306      	movs	r3, #6
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <sys_led_effect_for_sys_state_3>:

sys_led_status_t sys_led_effect_for_sys_state_3(bsp_gpio_t *LED, drv_led_active_level_t led_active_level)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
  drv_led_toggle(LED + 2, led_active_level);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3318      	adds	r3, #24
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fbbd 	bl	800075c <drv_led_toggle>
  drv_led_set_off(LED + 1, led_active_level);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	78fa      	ldrb	r2, [r7, #3]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fb9c 	bl	8000728 <drv_led_set_off>
  drv_led_set_off(LED, led_active_level);
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fb97 	bl	8000728 <drv_led_set_off>
  return SYS_LED_EFFECT_FOR_SYS_STATE_3_OK;
 8000ffa:	2308      	movs	r3, #8
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <sys_init>:

/* Function definitions ----------------------------------------------- */
sys_status_t sys_init(bsp_gpio_t *BUTTON, bsp_gpio_t *LED,
                      drv_led_active_level_t led_active_level,
                      TIM_HandleTypeDef *htim, uint32_t prescaler, uint32_t autoreload)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	71fb      	strb	r3, [r7, #7]
  sys_led_init(LED, led_active_level);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4619      	mov	r1, r3
 8001018:	68b8      	ldr	r0, [r7, #8]
 800101a:	f7ff ff5d 	bl	8000ed8 <sys_led_init>
  drv_button_init(BUTTON);
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f7ff fb46 	bl	80006b0 <drv_button_init>
  bsp_timer_set_autoreload(htim, autoreload);
 8001024:	69f9      	ldr	r1, [r7, #28]
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f7ff faff 	bl	800062a <bsp_timer_set_autoreload>
  bsp_timer_set_prescaler(htim, prescaler);
 800102c:	69b9      	ldr	r1, [r7, #24]
 800102e:	6838      	ldr	r0, [r7, #0]
 8001030:	f7ff fade 	bl	80005f0 <bsp_timer_set_prescaler>
  bsp_timer_start_it(htim);
 8001034:	6838      	ldr	r0, [r7, #0]
 8001036:	f7ff fb18 	bl	800066a <bsp_timer_start_it>
  return SYS_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <sys_manage_fsm>:

sys_status_t sys_manage_fsm(bsp_gpio_t *LED,
                            drv_led_active_level_t led_active_level,
                            sys_button_evt_t button_evt,
                            bool *timer_flag)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	460b      	mov	r3, r1
 8001050:	72fb      	strb	r3, [r7, #11]
 8001052:	4613      	mov	r3, r2
 8001054:	72bb      	strb	r3, [r7, #10]
  switch(fsm_state)
 8001056:	4b75      	ldr	r3, [pc, #468]	@ (800122c <sys_manage_fsm+0x1e8>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b09      	cmp	r3, #9
 800105c:	f200 809b 	bhi.w	8001196 <sys_manage_fsm+0x152>
 8001060:	a201      	add	r2, pc, #4	@ (adr r2, 8001068 <sys_manage_fsm+0x24>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	08001091 	.word	0x08001091
 800106c:	0800109f 	.word	0x0800109f
 8001070:	080010bd 	.word	0x080010bd
 8001074:	080010d3 	.word	0x080010d3
 8001078:	080010e9 	.word	0x080010e9
 800107c:	08001107 	.word	0x08001107
 8001080:	0800111d 	.word	0x0800111d
 8001084:	08001133 	.word	0x08001133
 8001088:	08001151 	.word	0x08001151
 800108c:	08001167 	.word	0x08001167
  {
    case IDLE: 
      if (button_evt == BUTTON_EVT_SINGLE_CLICK) 
 8001090:	7abb      	ldrb	r3, [r7, #10]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d172      	bne.n	800117c <sys_manage_fsm+0x138>
      {
        fsm_state = LED1_BLINK;
 8001096:	4b65      	ldr	r3, [pc, #404]	@ (800122c <sys_manage_fsm+0x1e8>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800109c:	e06e      	b.n	800117c <sys_manage_fsm+0x138>

    case LED1_BLINK:
      switch (button_evt)
 800109e:	7abb      	ldrb	r3, [r7, #10]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d002      	beq.n	80010aa <sys_manage_fsm+0x66>
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d004      	beq.n	80010b2 <sys_manage_fsm+0x6e>
          break;
        case BUTTON_EVT_HOLD:
          fsm_state = LED1_WAIT_OFF;
          break;
        default:
          break;
 80010a8:	e007      	b.n	80010ba <sys_manage_fsm+0x76>
          fsm_state = LED1_WAIT_TRANSIT;
 80010aa:	4b60      	ldr	r3, [pc, #384]	@ (800122c <sys_manage_fsm+0x1e8>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
          break;
 80010b0:	e003      	b.n	80010ba <sys_manage_fsm+0x76>
          fsm_state = LED1_WAIT_OFF;
 80010b2:	4b5e      	ldr	r3, [pc, #376]	@ (800122c <sys_manage_fsm+0x1e8>)
 80010b4:	2203      	movs	r2, #3
 80010b6:	701a      	strb	r2, [r3, #0]
          break;
 80010b8:	bf00      	nop
      }
      break;
 80010ba:	e06c      	b.n	8001196 <sys_manage_fsm+0x152>

    case LED1_WAIT_TRANSIT:
      if (*timer_flag == 1) 
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d05d      	beq.n	8001180 <sys_manage_fsm+0x13c>
      {
        fsm_state = LED2_BLINK;
 80010c4:	4b59      	ldr	r3, [pc, #356]	@ (800122c <sys_manage_fsm+0x1e8>)
 80010c6:	2204      	movs	r2, #4
 80010c8:	701a      	strb	r2, [r3, #0]
        *timer_flag = 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
      }
      break;
 80010d0:	e056      	b.n	8001180 <sys_manage_fsm+0x13c>

    case LED1_WAIT_OFF:
      if (*timer_flag == 1) 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d054      	beq.n	8001184 <sys_manage_fsm+0x140>
      {
        fsm_state = IDLE;
 80010da:	4b54      	ldr	r3, [pc, #336]	@ (800122c <sys_manage_fsm+0x1e8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
        *timer_flag = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80010e6:	e04d      	b.n	8001184 <sys_manage_fsm+0x140>

    case LED2_BLINK:
      switch (button_evt)
 80010e8:	7abb      	ldrb	r3, [r7, #10]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d002      	beq.n	80010f4 <sys_manage_fsm+0xb0>
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d004      	beq.n	80010fc <sys_manage_fsm+0xb8>
          break;
        case BUTTON_EVT_HOLD:
          fsm_state = LED2_WAIT_OFF;
          break;
        default:
          break;
 80010f2:	e007      	b.n	8001104 <sys_manage_fsm+0xc0>
          fsm_state = LED2_WAIT_TRANSIT;
 80010f4:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <sys_manage_fsm+0x1e8>)
 80010f6:	2205      	movs	r2, #5
 80010f8:	701a      	strb	r2, [r3, #0]
          break;
 80010fa:	e003      	b.n	8001104 <sys_manage_fsm+0xc0>
          fsm_state = LED2_WAIT_OFF;
 80010fc:	4b4b      	ldr	r3, [pc, #300]	@ (800122c <sys_manage_fsm+0x1e8>)
 80010fe:	2206      	movs	r2, #6
 8001100:	701a      	strb	r2, [r3, #0]
          break;
 8001102:	bf00      	nop
      }
      break;
 8001104:	e047      	b.n	8001196 <sys_manage_fsm+0x152>

    case LED2_WAIT_TRANSIT:
      if (*timer_flag == 1) 
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d03c      	beq.n	8001188 <sys_manage_fsm+0x144>
      {
        fsm_state = LED3_BLINK;
 800110e:	4b47      	ldr	r3, [pc, #284]	@ (800122c <sys_manage_fsm+0x1e8>)
 8001110:	2207      	movs	r2, #7
 8001112:	701a      	strb	r2, [r3, #0]
        *timer_flag = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
      }
      break;
 800111a:	e035      	b.n	8001188 <sys_manage_fsm+0x144>

    case LED2_WAIT_OFF:
      if (*timer_flag == 1) 
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d033      	beq.n	800118c <sys_manage_fsm+0x148>
      {
        fsm_state = IDLE;
 8001124:	4b41      	ldr	r3, [pc, #260]	@ (800122c <sys_manage_fsm+0x1e8>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
        *timer_flag = 0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001130:	e02c      	b.n	800118c <sys_manage_fsm+0x148>

    case LED3_BLINK:
      switch (button_evt)
 8001132:	7abb      	ldrb	r3, [r7, #10]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d002      	beq.n	800113e <sys_manage_fsm+0xfa>
 8001138:	2b03      	cmp	r3, #3
 800113a:	d004      	beq.n	8001146 <sys_manage_fsm+0x102>
          break;
        case BUTTON_EVT_HOLD:
          fsm_state = LED3_WAIT_OFF;
          break;
        default:
          break;
 800113c:	e007      	b.n	800114e <sys_manage_fsm+0x10a>
          fsm_state = LED3_WAIT_TRANSIT;
 800113e:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <sys_manage_fsm+0x1e8>)
 8001140:	2208      	movs	r2, #8
 8001142:	701a      	strb	r2, [r3, #0]
          break;
 8001144:	e003      	b.n	800114e <sys_manage_fsm+0x10a>
          fsm_state = LED3_WAIT_OFF;
 8001146:	4b39      	ldr	r3, [pc, #228]	@ (800122c <sys_manage_fsm+0x1e8>)
 8001148:	2209      	movs	r2, #9
 800114a:	701a      	strb	r2, [r3, #0]
          break;
 800114c:	bf00      	nop
      }
      break;
 800114e:	e022      	b.n	8001196 <sys_manage_fsm+0x152>

    case LED3_WAIT_TRANSIT:
      if (*timer_flag == 1) 
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01b      	beq.n	8001190 <sys_manage_fsm+0x14c>
      {
        fsm_state = LED1_BLINK;
 8001158:	4b34      	ldr	r3, [pc, #208]	@ (800122c <sys_manage_fsm+0x1e8>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
        *timer_flag = 0;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001164:	e014      	b.n	8001190 <sys_manage_fsm+0x14c>
    
    case LED3_WAIT_OFF:
      if (*timer_flag == 1) 
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d012      	beq.n	8001194 <sys_manage_fsm+0x150>
      {
        fsm_state = IDLE;
 800116e:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <sys_manage_fsm+0x1e8>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
        *timer_flag = 0;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
      }
      break;
 800117a:	e00b      	b.n	8001194 <sys_manage_fsm+0x150>
      break;
 800117c:	bf00      	nop
 800117e:	e00a      	b.n	8001196 <sys_manage_fsm+0x152>
      break;
 8001180:	bf00      	nop
 8001182:	e008      	b.n	8001196 <sys_manage_fsm+0x152>
      break;
 8001184:	bf00      	nop
 8001186:	e006      	b.n	8001196 <sys_manage_fsm+0x152>
      break;
 8001188:	bf00      	nop
 800118a:	e004      	b.n	8001196 <sys_manage_fsm+0x152>
      break;
 800118c:	bf00      	nop
 800118e:	e002      	b.n	8001196 <sys_manage_fsm+0x152>
      break;
 8001190:	bf00      	nop
 8001192:	e000      	b.n	8001196 <sys_manage_fsm+0x152>
      break;
 8001194:	bf00      	nop
  }

  switch(fsm_state)
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <sys_manage_fsm+0x1e8>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b07      	cmp	r3, #7
 800119c:	d83f      	bhi.n	800121e <sys_manage_fsm+0x1da>
 800119e:	a201      	add	r2, pc, #4	@ (adr r2, 80011a4 <sys_manage_fsm+0x160>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	080011c5 	.word	0x080011c5
 80011a8:	080011e1 	.word	0x080011e1
 80011ac:	0800121f 	.word	0x0800121f
 80011b0:	0800121f 	.word	0x0800121f
 80011b4:	080011fb 	.word	0x080011fb
 80011b8:	0800121f 	.word	0x0800121f
 80011bc:	0800121f 	.word	0x0800121f
 80011c0:	08001215 	.word	0x08001215
  {
    case(IDLE):
      sys_led_effect_for_sys_state_0(LED, led_active_level);
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	4619      	mov	r1, r3
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f7ff fea3 	bl	8000f14 <sys_led_effect_for_sys_state_0>
      break;
 80011ce:	e027      	b.n	8001220 <sys_manage_fsm+0x1dc>

    case(LED1_BLINK):
      while (*timer_flag)
      {
        sys_led_effect_for_sys_state_1(LED, led_active_level);
 80011d0:	7afb      	ldrb	r3, [r7, #11]
 80011d2:	4619      	mov	r1, r3
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff febb 	bl	8000f50 <sys_led_effect_for_sys_state_1>
        *timer_flag = 0;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
      while (*timer_flag)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f3      	bne.n	80011d0 <sys_manage_fsm+0x18c>
      }
      break;
 80011e8:	e01a      	b.n	8001220 <sys_manage_fsm+0x1dc>

    case(LED2_BLINK):
      while (*timer_flag)
      {
        sys_led_effect_for_sys_state_2(LED, led_active_level);
 80011ea:	7afb      	ldrb	r3, [r7, #11]
 80011ec:	4619      	mov	r1, r3
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f7ff fecc 	bl	8000f8c <sys_led_effect_for_sys_state_2>
        *timer_flag = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
      while (*timer_flag)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f3      	bne.n	80011ea <sys_manage_fsm+0x1a6>
      }
      break;
 8001202:	e00d      	b.n	8001220 <sys_manage_fsm+0x1dc>

      case(LED3_BLINK):
      while (*timer_flag)
      {
        sys_led_effect_for_sys_state_3(LED, led_active_level);
 8001204:	7afb      	ldrb	r3, [r7, #11]
 8001206:	4619      	mov	r1, r3
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff fedd 	bl	8000fc8 <sys_led_effect_for_sys_state_3>
        *timer_flag = 0;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
      while (*timer_flag)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1f3      	bne.n	8001204 <sys_manage_fsm+0x1c0>
      }
      break;
 800121c:	e000      	b.n	8001220 <sys_manage_fsm+0x1dc>

    default:
      break;
 800121e:	bf00      	nop
  }

  return SYS_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000aa 	.word	0x200000aa

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001268 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001234:	f7ff fc8a 	bl	8000b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123a:	490d      	ldr	r1, [pc, #52]	@ (8001270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800123c:	4a0d      	ldr	r2, [pc, #52]	@ (8001274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001250:	4c0a      	ldr	r4, [pc, #40]	@ (800127c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125e:	f001 fbcb 	bl	80029f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fa89 	bl	8000778 <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001274:	08002a78 	.word	0x08002a78
  ldr r2, =_sbss
 8001278:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 800127c:	200000b0 	.word	0x200000b0

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001288:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <HAL_Init+0x40>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_Init+0x40>)
 800129a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800129e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <HAL_Init+0x40>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f92b 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	200f      	movs	r0, #15
 80012b4:	f000 f808 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fbc0 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f943 	bl	8001572 <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f90b 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	@ (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000030 	.word	0x20000030
 8001320:	20000038 	.word	0x20000038
 8001324:	20000034 	.word	0x20000034

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	@ (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000038 	.word	0x20000038
 800134c:	200000ac 	.word	0x200000ac

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	@ (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200000ac 	.word	0x200000ac

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	@ (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	@ (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	@ (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff3e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff31 	bl	80013cc <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e159      	b.n	800185c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8148 	bne.w	8001856 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d005      	beq.n	80015de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b03      	cmp	r3, #3
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a2 	beq.w	8001856 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b57      	ldr	r3, [pc, #348]	@ (8001874 <HAL_GPIO_Init+0x2e8>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	4a56      	ldr	r2, [pc, #344]	@ (8001874 <HAL_GPIO_Init+0x2e8>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001720:	6453      	str	r3, [r2, #68]	@ 0x44
 8001722:	4b54      	ldr	r3, [pc, #336]	@ (8001874 <HAL_GPIO_Init+0x2e8>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172e:	4a52      	ldr	r2, [pc, #328]	@ (8001878 <HAL_GPIO_Init+0x2ec>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a49      	ldr	r2, [pc, #292]	@ (800187c <HAL_GPIO_Init+0x2f0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0x202>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a48      	ldr	r2, [pc, #288]	@ (8001880 <HAL_GPIO_Init+0x2f4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0x1fe>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a47      	ldr	r2, [pc, #284]	@ (8001884 <HAL_GPIO_Init+0x2f8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00d      	beq.n	8001786 <HAL_GPIO_Init+0x1fa>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a46      	ldr	r2, [pc, #280]	@ (8001888 <HAL_GPIO_Init+0x2fc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x1f6>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a45      	ldr	r2, [pc, #276]	@ (800188c <HAL_GPIO_Init+0x300>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_GPIO_Init+0x1f2>
 800177a:	2304      	movs	r3, #4
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800177e:	2307      	movs	r3, #7
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x204>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x204>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800178e:	2300      	movs	r3, #0
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a0:	4935      	ldr	r1, [pc, #212]	@ (8001878 <HAL_GPIO_Init+0x2ec>)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ae:	4b38      	ldr	r3, [pc, #224]	@ (8001890 <HAL_GPIO_Init+0x304>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001890 <HAL_GPIO_Init+0x304>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <HAL_GPIO_Init+0x304>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017fc:	4a24      	ldr	r2, [pc, #144]	@ (8001890 <HAL_GPIO_Init+0x304>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <HAL_GPIO_Init+0x304>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001826:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <HAL_GPIO_Init+0x304>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182c:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <HAL_GPIO_Init+0x304>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001850:	4a0f      	ldr	r2, [pc, #60]	@ (8001890 <HAL_GPIO_Init+0x304>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	f67f aea2 	bls.w	80015a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3724      	adds	r7, #36	@ 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40013800 	.word	0x40013800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40020800 	.word	0x40020800
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40021000 	.word	0x40021000
 8001890:	40013c00 	.word	0x40013c00

08001894 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e001      	b.n	80018b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	619a      	str	r2, [r3, #24]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b085      	sub	sp, #20
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001908:	887a      	ldrh	r2, [r7, #2]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	041a      	lsls	r2, r3, #16
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43d9      	mvns	r1, r3
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	400b      	ands	r3, r1
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	619a      	str	r2, [r3, #24]
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e267      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d075      	beq.n	8001a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800194a:	4b88      	ldr	r3, [pc, #544]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b04      	cmp	r3, #4
 8001954:	d00c      	beq.n	8001970 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001956:	4b85      	ldr	r3, [pc, #532]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800195e:	2b08      	cmp	r3, #8
 8001960:	d112      	bne.n	8001988 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001962:	4b82      	ldr	r3, [pc, #520]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800196a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800196e:	d10b      	bne.n	8001988 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	4b7e      	ldr	r3, [pc, #504]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d05b      	beq.n	8001a34 <HAL_RCC_OscConfig+0x108>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d157      	bne.n	8001a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e242      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001990:	d106      	bne.n	80019a0 <HAL_RCC_OscConfig+0x74>
 8001992:	4b76      	ldr	r3, [pc, #472]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a75      	ldr	r2, [pc, #468]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e01d      	b.n	80019dc <HAL_RCC_OscConfig+0xb0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x98>
 80019aa:	4b70      	ldr	r3, [pc, #448]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6f      	ldr	r2, [pc, #444]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6c      	ldr	r2, [pc, #432]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e00b      	b.n	80019dc <HAL_RCC_OscConfig+0xb0>
 80019c4:	4b69      	ldr	r3, [pc, #420]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a68      	ldr	r2, [pc, #416]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b66      	ldr	r3, [pc, #408]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a65      	ldr	r2, [pc, #404]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fcb4 	bl	8001350 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fcb0 	bl	8001350 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	@ 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e207      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0xc0>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fca0 	bl	8001350 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fc9c 	bl	8001350 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	@ 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1f3      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	4b51      	ldr	r3, [pc, #324]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0xe8>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d063      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a42:	4b4a      	ldr	r3, [pc, #296]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00b      	beq.n	8001a66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4e:	4b47      	ldr	r3, [pc, #284]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d11c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a5a:	4b44      	ldr	r3, [pc, #272]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d116      	bne.n	8001a94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	4b41      	ldr	r3, [pc, #260]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_RCC_OscConfig+0x152>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e1c7      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4937      	ldr	r1, [pc, #220]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	e03a      	b.n	8001b0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9c:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <HAL_RCC_OscConfig+0x244>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fc55 	bl	8001350 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fc51 	bl	8001350 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1a8      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b28      	ldr	r3, [pc, #160]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4925      	ldr	r1, [pc, #148]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e015      	b.n	8001b0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_RCC_OscConfig+0x244>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fc34 	bl	8001350 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aec:	f7ff fc30 	bl	8001350 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e187      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d036      	beq.n	8001b84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d016      	beq.n	8001b4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <HAL_RCC_OscConfig+0x248>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff fc14 	bl	8001350 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fc10 	bl	8001350 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e167      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x200>
 8001b4a:	e01b      	b.n	8001b84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4c:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_RCC_OscConfig+0x248>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b52:	f7ff fbfd 	bl	8001350 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b58:	e00e      	b.n	8001b78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fbf9 	bl	8001350 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d907      	bls.n	8001b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e150      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	42470000 	.word	0x42470000
 8001b74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b78:	4b88      	ldr	r3, [pc, #544]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ea      	bne.n	8001b5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8097 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b96:	4b81      	ldr	r3, [pc, #516]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10f      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b7d      	ldr	r3, [pc, #500]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	4a7c      	ldr	r2, [pc, #496]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	4b77      	ldr	r3, [pc, #476]	@ (8001da0 <HAL_RCC_OscConfig+0x474>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bce:	4b74      	ldr	r3, [pc, #464]	@ (8001da0 <HAL_RCC_OscConfig+0x474>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a73      	ldr	r2, [pc, #460]	@ (8001da0 <HAL_RCC_OscConfig+0x474>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bda:	f7ff fbb9 	bl	8001350 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7ff fbb5 	bl	8001350 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e10c      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8001da0 <HAL_RCC_OscConfig+0x474>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2ea>
 8001c08:	4b64      	ldr	r3, [pc, #400]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0c:	4a63      	ldr	r2, [pc, #396]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c14:	e01c      	b.n	8001c50 <HAL_RCC_OscConfig+0x324>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x30c>
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c22:	4a5e      	ldr	r2, [pc, #376]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0x324>
 8001c38:	4b58      	ldr	r3, [pc, #352]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c3c:	4a57      	ldr	r2, [pc, #348]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c44:	4b55      	ldr	r3, [pc, #340]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c48:	4a54      	ldr	r2, [pc, #336]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c4a:	f023 0304 	bic.w	r3, r3, #4
 8001c4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d015      	beq.n	8001c84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7ff fb7a 	bl	8001350 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff fb76 	bl	8001350 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0cb      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c76:	4b49      	ldr	r3, [pc, #292]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0ee      	beq.n	8001c60 <HAL_RCC_OscConfig+0x334>
 8001c82:	e014      	b.n	8001cae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7ff fb64 	bl	8001350 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fb60 	bl	8001350 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e0b5      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ee      	bne.n	8001c8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4b39      	ldr	r3, [pc, #228]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	4a38      	ldr	r2, [pc, #224]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80a1 	beq.w	8001e0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cca:	4b34      	ldr	r3, [pc, #208]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d05c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d141      	bne.n	8001d62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b31      	ldr	r3, [pc, #196]	@ (8001da4 <HAL_RCC_OscConfig+0x478>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fb34 	bl	8001350 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff fb30 	bl	8001350 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e087      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfe:	4b27      	ldr	r3, [pc, #156]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	019b      	lsls	r3, r3, #6
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	3b01      	subs	r3, #1
 8001d24:	041b      	lsls	r3, r3, #16
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	491b      	ldr	r1, [pc, #108]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <HAL_RCC_OscConfig+0x478>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fb09 	bl	8001350 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff fb05 	bl	8001350 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e05c      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x416>
 8001d60:	e054      	b.n	8001e0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <HAL_RCC_OscConfig+0x478>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff faf2 	bl	8001350 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff faee 	bl	8001350 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e045      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x444>
 8001d8e:	e03d      	b.n	8001e0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e038      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40007000 	.word	0x40007000
 8001da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <HAL_RCC_OscConfig+0x4ec>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d028      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d121      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d11a      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d111      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	3b01      	subs	r3, #1
 8001df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800

08001e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0cc      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e30:	4b68      	ldr	r3, [pc, #416]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d90c      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b65      	ldr	r3, [pc, #404]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b63      	ldr	r3, [pc, #396]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0b8      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e70:	4b59      	ldr	r3, [pc, #356]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a58      	ldr	r2, [pc, #352]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e88:	4b53      	ldr	r3, [pc, #332]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a52      	ldr	r2, [pc, #328]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e94:	4b50      	ldr	r3, [pc, #320]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	494d      	ldr	r1, [pc, #308]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d044      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4b47      	ldr	r3, [pc, #284]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d119      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e07f      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d003      	beq.n	8001eda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e06f      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e067      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efa:	4b37      	ldr	r3, [pc, #220]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4934      	ldr	r1, [pc, #208]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7ff fa20 	bl	8001350 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7ff fa1c 	bl	8001350 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e04f      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 020c 	and.w	r2, r3, #12
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1eb      	bne.n	8001f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d20c      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e032      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4916      	ldr	r1, [pc, #88]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8e:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	490e      	ldr	r1, [pc, #56]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fa2:	f000 f821 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	490a      	ldr	r1, [pc, #40]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	5ccb      	ldrb	r3, [r1, r3]
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	4a09      	ldr	r2, [pc, #36]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f980 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	08002a58 	.word	0x08002a58
 8001fe0:	20000030 	.word	0x20000030
 8001fe4:	20000034 	.word	0x20000034

08001fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fec:	b090      	sub	sp, #64	@ 0x40
 8001fee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002000:	4b59      	ldr	r3, [pc, #356]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d00d      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x40>
 800200c:	2b08      	cmp	r3, #8
 800200e:	f200 80a1 	bhi.w	8002154 <HAL_RCC_GetSysClockFreq+0x16c>
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x34>
 8002016:	2b04      	cmp	r3, #4
 8002018:	d003      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x3a>
 800201a:	e09b      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800201c:	4b53      	ldr	r3, [pc, #332]	@ (800216c <HAL_RCC_GetSysClockFreq+0x184>)
 800201e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002020:	e09b      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002022:	4b53      	ldr	r3, [pc, #332]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x188>)
 8002024:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002026:	e098      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002028:	4b4f      	ldr	r3, [pc, #316]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002032:	4b4d      	ldr	r3, [pc, #308]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d028      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203e:	4b4a      	ldr	r3, [pc, #296]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	099b      	lsrs	r3, r3, #6
 8002044:	2200      	movs	r2, #0
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	627a      	str	r2, [r7, #36]	@ 0x24
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002050:	2100      	movs	r1, #0
 8002052:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x188>)
 8002054:	fb03 f201 	mul.w	r2, r3, r1
 8002058:	2300      	movs	r3, #0
 800205a:	fb00 f303 	mul.w	r3, r0, r3
 800205e:	4413      	add	r3, r2
 8002060:	4a43      	ldr	r2, [pc, #268]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x188>)
 8002062:	fba0 1202 	umull	r1, r2, r0, r2
 8002066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002068:	460a      	mov	r2, r1
 800206a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800206c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800206e:	4413      	add	r3, r2
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002074:	2200      	movs	r2, #0
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	61fa      	str	r2, [r7, #28]
 800207a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800207e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002082:	f7fe f8a9 	bl	80001d8 <__aeabi_uldivmod>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4613      	mov	r3, r2
 800208c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800208e:	e053      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002090:	4b35      	ldr	r3, [pc, #212]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	2200      	movs	r2, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	617a      	str	r2, [r7, #20]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020a2:	f04f 0b00 	mov.w	fp, #0
 80020a6:	4652      	mov	r2, sl
 80020a8:	465b      	mov	r3, fp
 80020aa:	f04f 0000 	mov.w	r0, #0
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	0159      	lsls	r1, r3, #5
 80020b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020b8:	0150      	lsls	r0, r2, #5
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	ebb2 080a 	subs.w	r8, r2, sl
 80020c2:	eb63 090b 	sbc.w	r9, r3, fp
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020da:	ebb2 0408 	subs.w	r4, r2, r8
 80020de:	eb63 0509 	sbc.w	r5, r3, r9
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	00eb      	lsls	r3, r5, #3
 80020ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020f0:	00e2      	lsls	r2, r4, #3
 80020f2:	4614      	mov	r4, r2
 80020f4:	461d      	mov	r5, r3
 80020f6:	eb14 030a 	adds.w	r3, r4, sl
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	eb45 030b 	adc.w	r3, r5, fp
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800210e:	4629      	mov	r1, r5
 8002110:	028b      	lsls	r3, r1, #10
 8002112:	4621      	mov	r1, r4
 8002114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002118:	4621      	mov	r1, r4
 800211a:	028a      	lsls	r2, r1, #10
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002122:	2200      	movs	r2, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	60fa      	str	r2, [r7, #12]
 8002128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800212c:	f7fe f854 	bl	80001d8 <__aeabi_uldivmod>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4613      	mov	r3, r2
 8002136:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	3301      	adds	r3, #1
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002148:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800214a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002150:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002152:	e002      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <HAL_RCC_GetSysClockFreq+0x184>)
 8002156:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800215c:	4618      	mov	r0, r3
 800215e:	3740      	adds	r7, #64	@ 0x40
 8002160:	46bd      	mov	sp, r7
 8002162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	00f42400 	.word	0x00f42400
 8002170:	017d7840 	.word	0x017d7840

08002174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e041      	b.n	800220a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fc76 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f000 fa70 	bl	8002698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d001      	beq.n	800222c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e044      	b.n	80022b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1e      	ldr	r2, [pc, #120]	@ (80022c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d018      	beq.n	8002280 <HAL_TIM_Base_Start_IT+0x6c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002256:	d013      	beq.n	8002280 <HAL_TIM_Base_Start_IT+0x6c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1a      	ldr	r2, [pc, #104]	@ (80022c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00e      	beq.n	8002280 <HAL_TIM_Base_Start_IT+0x6c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a19      	ldr	r2, [pc, #100]	@ (80022cc <HAL_TIM_Base_Start_IT+0xb8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d009      	beq.n	8002280 <HAL_TIM_Base_Start_IT+0x6c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a17      	ldr	r2, [pc, #92]	@ (80022d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_TIM_Base_Start_IT+0x6c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a16      	ldr	r2, [pc, #88]	@ (80022d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d111      	bne.n	80022a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b06      	cmp	r3, #6
 8002290:	d010      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a2:	e007      	b.n	80022b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40000800 	.word	0x40000800
 80022d0:	40000c00 	.word	0x40000c00
 80022d4:	40014000 	.word	0x40014000

080022d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d020      	beq.n	800233c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01b      	beq.n	800233c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0202 	mvn.w	r2, #2
 800230c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f999 	bl	800265a <HAL_TIM_IC_CaptureCallback>
 8002328:	e005      	b.n	8002336 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f98b 	bl	8002646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f99c 	bl	800266e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d020      	beq.n	8002388 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0204 	mvn.w	r2, #4
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2202      	movs	r2, #2
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f973 	bl	800265a <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f965 	bl	8002646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f976 	bl	800266e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d020      	beq.n	80023d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0208 	mvn.w	r2, #8
 80023a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2204      	movs	r2, #4
 80023aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f94d 	bl	800265a <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f93f 	bl	8002646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f950 	bl	800266e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d020      	beq.n	8002420 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0210 	mvn.w	r2, #16
 80023f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2208      	movs	r2, #8
 80023f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f927 	bl	800265a <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f919 	bl	8002646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f92a 	bl	800266e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00c      	beq.n	8002444 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0201 	mvn.w	r2, #1
 800243c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe f9cc 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00c      	beq.n	8002468 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fab6 	bl	80029d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00c      	beq.n	800248c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8fb 	bl	8002682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00c      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d007      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0220 	mvn.w	r2, #32
 80024a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fa88 	bl	80029c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_TIM_ConfigClockSource+0x1c>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0b4      	b.n	800263e <HAL_TIM_ConfigClockSource+0x186>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80024f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800250c:	d03e      	beq.n	800258c <HAL_TIM_ConfigClockSource+0xd4>
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002512:	f200 8087 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800251a:	f000 8086 	beq.w	800262a <HAL_TIM_ConfigClockSource+0x172>
 800251e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002522:	d87f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b70      	cmp	r3, #112	@ 0x70
 8002526:	d01a      	beq.n	800255e <HAL_TIM_ConfigClockSource+0xa6>
 8002528:	2b70      	cmp	r3, #112	@ 0x70
 800252a:	d87b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b60      	cmp	r3, #96	@ 0x60
 800252e:	d050      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x11a>
 8002530:	2b60      	cmp	r3, #96	@ 0x60
 8002532:	d877      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b50      	cmp	r3, #80	@ 0x50
 8002536:	d03c      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0xfa>
 8002538:	2b50      	cmp	r3, #80	@ 0x50
 800253a:	d873      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b40      	cmp	r3, #64	@ 0x40
 800253e:	d058      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x13a>
 8002540:	2b40      	cmp	r3, #64	@ 0x40
 8002542:	d86f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b30      	cmp	r3, #48	@ 0x30
 8002546:	d064      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 8002548:	2b30      	cmp	r3, #48	@ 0x30
 800254a:	d86b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b20      	cmp	r3, #32
 800254e:	d060      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d867      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05c      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 8002558:	2b10      	cmp	r3, #16
 800255a:	d05a      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 800255c:	e062      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800256e:	f000 f999 	bl	80028a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	609a      	str	r2, [r3, #8]
      break;
 800258a:	e04f      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800259c:	f000 f982 	bl	80028a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025ae:	609a      	str	r2, [r3, #8]
      break;
 80025b0:	e03c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 f8f6 	bl	80027b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2150      	movs	r1, #80	@ 0x50
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f94f 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 80025d0:	e02c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 f915 	bl	800280e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2160      	movs	r1, #96	@ 0x60
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f93f 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 80025f0:	e01c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f8d6 	bl	80027b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2140      	movs	r1, #64	@ 0x40
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f92f 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 8002610:	e00c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f000 f926 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 8002622:	e003      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e000      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800262a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3a      	ldr	r2, [pc, #232]	@ (8002794 <TIM_Base_SetConfig+0xfc>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00f      	beq.n	80026d0 <TIM_Base_SetConfig+0x38>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b6:	d00b      	beq.n	80026d0 <TIM_Base_SetConfig+0x38>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a37      	ldr	r2, [pc, #220]	@ (8002798 <TIM_Base_SetConfig+0x100>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d007      	beq.n	80026d0 <TIM_Base_SetConfig+0x38>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a36      	ldr	r2, [pc, #216]	@ (800279c <TIM_Base_SetConfig+0x104>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d003      	beq.n	80026d0 <TIM_Base_SetConfig+0x38>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a35      	ldr	r2, [pc, #212]	@ (80027a0 <TIM_Base_SetConfig+0x108>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d108      	bne.n	80026e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002794 <TIM_Base_SetConfig+0xfc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01b      	beq.n	8002722 <TIM_Base_SetConfig+0x8a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f0:	d017      	beq.n	8002722 <TIM_Base_SetConfig+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a28      	ldr	r2, [pc, #160]	@ (8002798 <TIM_Base_SetConfig+0x100>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <TIM_Base_SetConfig+0x8a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a27      	ldr	r2, [pc, #156]	@ (800279c <TIM_Base_SetConfig+0x104>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00f      	beq.n	8002722 <TIM_Base_SetConfig+0x8a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a26      	ldr	r2, [pc, #152]	@ (80027a0 <TIM_Base_SetConfig+0x108>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00b      	beq.n	8002722 <TIM_Base_SetConfig+0x8a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a25      	ldr	r2, [pc, #148]	@ (80027a4 <TIM_Base_SetConfig+0x10c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <TIM_Base_SetConfig+0x8a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a24      	ldr	r2, [pc, #144]	@ (80027a8 <TIM_Base_SetConfig+0x110>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d003      	beq.n	8002722 <TIM_Base_SetConfig+0x8a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a23      	ldr	r2, [pc, #140]	@ (80027ac <TIM_Base_SetConfig+0x114>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d108      	bne.n	8002734 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a0e      	ldr	r2, [pc, #56]	@ (8002794 <TIM_Base_SetConfig+0xfc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d103      	bne.n	8002768 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f023 0201 	bic.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	611a      	str	r2, [r3, #16]
  }
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40010000 	.word	0x40010000
 8002798:	40000400 	.word	0x40000400
 800279c:	40000800 	.word	0x40000800
 80027a0:	40000c00 	.word	0x40000c00
 80027a4:	40014000 	.word	0x40014000
 80027a8:	40014400 	.word	0x40014400
 80027ac:	40014800 	.word	0x40014800

080027b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f023 0201 	bic.w	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f023 030a 	bic.w	r3, r3, #10
 80027ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280e:	b480      	push	{r7}
 8002810:	b087      	sub	sp, #28
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f023 0210 	bic.w	r2, r3, #16
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	031b      	lsls	r3, r3, #12
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800284a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	621a      	str	r2, [r3, #32]
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	f043 0307 	orr.w	r3, r3, #7
 8002890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	021a      	lsls	r2, r3, #8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e050      	b.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1c      	ldr	r2, [pc, #112]	@ (80029ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d018      	beq.n	8002972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002948:	d013      	beq.n	8002972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a18      	ldr	r2, [pc, #96]	@ (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a16      	ldr	r2, [pc, #88]	@ (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a15      	ldr	r2, [pc, #84]	@ (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a13      	ldr	r2, [pc, #76]	@ (80029bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d10c      	bne.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4313      	orrs	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40000800 	.word	0x40000800
 80029b8:	40000c00 	.word	0x40000c00
 80029bc:	40014000 	.word	0x40014000

080029c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <memset>:
 80029e8:	4402      	add	r2, r0
 80029ea:	4603      	mov	r3, r0
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <memset+0xa>
 80029f0:	4770      	bx	lr
 80029f2:	f803 1b01 	strb.w	r1, [r3], #1
 80029f6:	e7f9      	b.n	80029ec <memset+0x4>

080029f8 <__libc_init_array>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002a30 <__libc_init_array+0x38>)
 80029fc:	4c0d      	ldr	r4, [pc, #52]	@ (8002a34 <__libc_init_array+0x3c>)
 80029fe:	1b64      	subs	r4, r4, r5
 8002a00:	10a4      	asrs	r4, r4, #2
 8002a02:	2600      	movs	r6, #0
 8002a04:	42a6      	cmp	r6, r4
 8002a06:	d109      	bne.n	8002a1c <__libc_init_array+0x24>
 8002a08:	4d0b      	ldr	r5, [pc, #44]	@ (8002a38 <__libc_init_array+0x40>)
 8002a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8002a3c <__libc_init_array+0x44>)
 8002a0c:	f000 f818 	bl	8002a40 <_init>
 8002a10:	1b64      	subs	r4, r4, r5
 8002a12:	10a4      	asrs	r4, r4, #2
 8002a14:	2600      	movs	r6, #0
 8002a16:	42a6      	cmp	r6, r4
 8002a18:	d105      	bne.n	8002a26 <__libc_init_array+0x2e>
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
 8002a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a20:	4798      	blx	r3
 8002a22:	3601      	adds	r6, #1
 8002a24:	e7ee      	b.n	8002a04 <__libc_init_array+0xc>
 8002a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2a:	4798      	blx	r3
 8002a2c:	3601      	adds	r6, #1
 8002a2e:	e7f2      	b.n	8002a16 <__libc_init_array+0x1e>
 8002a30:	08002a70 	.word	0x08002a70
 8002a34:	08002a70 	.word	0x08002a70
 8002a38:	08002a70 	.word	0x08002a70
 8002a3c:	08002a74 	.word	0x08002a74

08002a40 <_init>:
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	bf00      	nop
 8002a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a46:	bc08      	pop	{r3}
 8002a48:	469e      	mov	lr, r3
 8002a4a:	4770      	bx	lr

08002a4c <_fini>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	bf00      	nop
 8002a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a52:	bc08      	pop	{r3}
 8002a54:	469e      	mov	lr, r3
 8002a56:	4770      	bx	lr
